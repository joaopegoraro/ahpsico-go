// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: invite.sql

package db

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const createInvite = `-- name: CreateInvite :one

INSERT INTO
    invites (
        phone_number,
        doctor_uuid,
        patient_uuid
    )
VALUES (?, ?, ?) RETURNING id, phone_number, patient_uuid, doctor_uuid, created_at
`

type CreateInviteParams struct {
	PhoneNumber string
	DoctorUuid  uuid.UUID
	PatientUuid uuid.UUID
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) (Invite, error) {
	row := q.db.QueryRowContext(ctx, createInvite, arg.PhoneNumber, arg.DoctorUuid, arg.PatientUuid)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :exec

DELETE FROM invites WHERE id = ?
`

func (q *Queries) DeleteInvite(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvite, id)
	return err
}

const getDoctorInviteByPhoneNumber = `-- name: GetDoctorInviteByPhoneNumber :one

SELECT invites.id, invites.phone_number, invites.patient_uuid, invites.doctor_uuid, invites.created_at
FROM invites
WHERE
    invites.doctor_uuid = ?
    AND invites.phone_number = ?
LIMIT 1
`

type GetDoctorInviteByPhoneNumberParams struct {
	DoctorUuid  uuid.UUID
	PhoneNumber string
}

func (q *Queries) GetDoctorInviteByPhoneNumber(ctx context.Context, arg GetDoctorInviteByPhoneNumberParams) (Invite, error) {
	row := q.db.QueryRowContext(ctx, getDoctorInviteByPhoneNumber, arg.DoctorUuid, arg.PhoneNumber)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.CreatedAt,
	)
	return i, err
}

const getInvite = `-- name: GetInvite :one

SELECT invites.id, invites.phone_number, invites.patient_uuid, invites.doctor_uuid, invites.created_at FROM invites WHERE invites.id = ? LIMIT 1
`

func (q *Queries) GetInvite(ctx context.Context, id int64) (Invite, error) {
	row := q.db.QueryRowContext(ctx, getInvite, id)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.CreatedAt,
	)
	return i, err
}

const listDoctorInvites = `-- name: ListDoctorInvites :many

SELECT
    invites.id as invite_id,
    invites.phone_number as invite_phone_number,
    invites.patient_uuid as invite_patient_uuid,
    invites.created_at as invite_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description
FROM invites
    JOIN users as doctors on doctors.uuid = invites.doctor_uuid
WHERE invites.doctor_uuid = ?
`

type ListDoctorInvitesRow struct {
	InviteID          int64
	InvitePhoneNumber string
	InvitePatientUuid uuid.UUID
	InviteCreatedAt   time.Time
	DoctorUuid        uuid.UUID
	DoctorName        string
	DoctorDescription string
}

func (q *Queries) ListDoctorInvites(ctx context.Context, doctorUuid uuid.UUID) ([]ListDoctorInvitesRow, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorInvites, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDoctorInvitesRow
	for rows.Next() {
		var i ListDoctorInvitesRow
		if err := rows.Scan(
			&i.InviteID,
			&i.InvitePhoneNumber,
			&i.InvitePatientUuid,
			&i.InviteCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientInvites = `-- name: ListPatientInvites :many

SELECT
    invites.id as invite_id,
    invites.phone_number as invite_phone_number,
    invites.patient_uuid as invite_patient_uuid,
    invites.created_at as invite_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description
FROM invites
    JOIN users as doctors on doctors.uuid = invites.doctor_uuid
WHERE invites.patient_uuid = ?
`

type ListPatientInvitesRow struct {
	InviteID          int64
	InvitePhoneNumber string
	InvitePatientUuid uuid.UUID
	InviteCreatedAt   time.Time
	DoctorUuid        uuid.UUID
	DoctorName        string
	DoctorDescription string
}

func (q *Queries) ListPatientInvites(ctx context.Context, patientUuid uuid.UUID) ([]ListPatientInvitesRow, error) {
	rows, err := q.db.QueryContext(ctx, listPatientInvites, patientUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPatientInvitesRow
	for rows.Next() {
		var i ListPatientInvitesRow
		if err := rows.Scan(
			&i.InviteID,
			&i.InvitePhoneNumber,
			&i.InvitePatientUuid,
			&i.InviteCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
