// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: invite.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const createInvite = `-- name: CreateInvite :one

INSERT INTO
    invites (
        phone_number,
        doctor_uuid,
        patient_uuid
    )
VALUES (?, ?, ?) RETURNING id, phone_number, patient_uuid, doctor_uuid
`

type CreateInviteParams struct {
	PhoneNumber string
	DoctorUuid  uuid.UUID
	PatientUuid uuid.UUID
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) (Invite, error) {
	row := q.db.QueryRowContext(ctx, createInvite, arg.PhoneNumber, arg.DoctorUuid, arg.PatientUuid)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PatientUuid,
		&i.DoctorUuid,
	)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :exec

DELETE FROM invites WHERE id = ?
`

func (q *Queries) DeleteInvite(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvite, id)
	return err
}

const listDoctorInvites = `-- name: ListDoctorInvites :many

SELECT id, phone_number, patient_uuid, doctor_uuid FROM invites WHERE doctor_uuid = ?
`

func (q *Queries) ListDoctorInvites(ctx context.Context, doctorUuid uuid.UUID) ([]Invite, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorInvites, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.PatientUuid,
			&i.DoctorUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorInvitesWithPhoneNumber = `-- name: ListDoctorInvitesWithPhoneNumber :many

SELECT id, phone_number, patient_uuid, doctor_uuid
FROM invites
WHERE
    doctor_uuid = ?
    AND phone_number = ?
`

type ListDoctorInvitesWithPhoneNumberParams struct {
	DoctorUuid  uuid.UUID
	PhoneNumber string
}

func (q *Queries) ListDoctorInvitesWithPhoneNumber(ctx context.Context, arg ListDoctorInvitesWithPhoneNumberParams) ([]Invite, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorInvitesWithPhoneNumber, arg.DoctorUuid, arg.PhoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.PatientUuid,
			&i.DoctorUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientInvites = `-- name: ListPatientInvites :many

SELECT id, phone_number, patient_uuid, doctor_uuid FROM invites WHERE patient_uuid = ?
`

func (q *Queries) ListPatientInvites(ctx context.Context, patientUuid uuid.UUID) ([]Invite, error) {
	rows, err := q.db.QueryContext(ctx, listPatientInvites, patientUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.PatientUuid,
			&i.DoctorUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
