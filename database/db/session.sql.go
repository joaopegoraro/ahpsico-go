// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/gofrs/uuid"
)

const createSession = `-- name: CreateSession :one

INSERT INTO
    sessions (
        patient_uuid,
        doctor_uuid,
        date,
        group_index,
        type,
        status
    )
VALUES (?, ?, ?, ?, ?, ?) RETURNING id
`

type CreateSessionParams struct {
	PatientUuid uuid.UUID
	DoctorUuid  uuid.UUID
	Date        time.Time
	GroupIndex  int64
	Type        int64
	Status      int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.PatientUuid,
		arg.DoctorUuid,
		arg.Date,
		arg.GroupIndex,
		arg.Type,
		arg.Status,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getDoctorSessionByExactDate = `-- name: GetDoctorSessionByExactDate :one

SELECT sessions.id, sessions.patient_uuid, sessions.doctor_uuid, sessions.date, sessions.group_index, sessions.type, sessions.status, sessions.created_at, sessions.updated_at
FROM sessions
WHERE doctor_uuid = ? AND date = ?
LIMIT 1
`

type GetDoctorSessionByExactDateParams struct {
	DoctorUuid uuid.UUID
	Date       time.Time
}

func (q *Queries) GetDoctorSessionByExactDate(ctx context.Context, arg GetDoctorSessionByExactDateParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, getDoctorSessionByExactDate, arg.DoctorUuid, arg.Date)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.Date,
		&i.GroupIndex,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one

SELECT id, patient_uuid, doctor_uuid, date, group_index, type, status, created_at, updated_at FROM sessions WHERE id = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.Date,
		&i.GroupIndex,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionWithParticipants = `-- name: GetSessionWithParticipants :one

SELECT
    sessions.id as session_id,
    sessions.date as session_date,
    sessions.group_index as session_group_index,
    sessions.type as session_type,
    sessions.status as session_status,
    sessions.created_at as session_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description,
    patients.uuid as patient_uuid,
    patients.name as patient_name,
    patients.phone_number as patient_phone_number
FROM sessions
    JOIN users as doctors ON doctors.uuid = sessions.doctor_uuid
    JOIN users as patients ON patients.uuid = sessions.patient_uuid
WHERE sessions.id = ?
LIMIT 1
`

type GetSessionWithParticipantsRow struct {
	SessionID          int64
	SessionDate        time.Time
	SessionGroupIndex  int64
	SessionType        int64
	SessionStatus      int64
	SessionCreatedAt   time.Time
	DoctorUuid         uuid.UUID
	DoctorName         string
	DoctorDescription  string
	PatientUuid        uuid.UUID
	PatientName        string
	PatientPhoneNumber string
}

func (q *Queries) GetSessionWithParticipants(ctx context.Context, id int64) (GetSessionWithParticipantsRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionWithParticipants, id)
	var i GetSessionWithParticipantsRow
	err := row.Scan(
		&i.SessionID,
		&i.SessionDate,
		&i.SessionGroupIndex,
		&i.SessionType,
		&i.SessionStatus,
		&i.SessionCreatedAt,
		&i.DoctorUuid,
		&i.DoctorName,
		&i.DoctorDescription,
		&i.PatientUuid,
		&i.PatientName,
		&i.PatientPhoneNumber,
	)
	return i, err
}

const listDoctorActiveSessions = `-- name: ListDoctorActiveSessions :many

SELECT id, patient_uuid, doctor_uuid, date, group_index, type, status, created_at, updated_at
FROM sessions
WHERE
    doctor_uuid = ?
    AND status != 2
    AND status != 3
`

func (q *Queries) ListDoctorActiveSessions(ctx context.Context, doctorUuid uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorActiveSessions, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.PatientUuid,
			&i.DoctorUuid,
			&i.Date,
			&i.GroupIndex,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorPatientSessions = `-- name: ListDoctorPatientSessions :many

SELECT
    sessions.id as session_id,
    sessions.date as session_date,
    sessions.group_index as session_group_index,
    sessions.type as session_type,
    sessions.status as session_status,
    sessions.created_at as session_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description,
    patients.uuid as patient_uuid,
    patients.name as patient_name,
    patients.phone_number as patient_phone_number
FROM sessions
    JOIN users as doctors ON doctors.uuid = sessions.doctor_uuid
    JOIN users as patients ON patients.uuid = sessions.patient_uuid
WHERE
    sessions.patient_uuid = ?
    AND sessions.doctor_uuid = ?
`

type ListDoctorPatientSessionsParams struct {
	PatientUuid uuid.UUID
	DoctorUuid  uuid.UUID
}

type ListDoctorPatientSessionsRow struct {
	SessionID          int64
	SessionDate        time.Time
	SessionGroupIndex  int64
	SessionType        int64
	SessionStatus      int64
	SessionCreatedAt   time.Time
	DoctorUuid         uuid.UUID
	DoctorName         string
	DoctorDescription  string
	PatientUuid        uuid.UUID
	PatientName        string
	PatientPhoneNumber string
}

func (q *Queries) ListDoctorPatientSessions(ctx context.Context, arg ListDoctorPatientSessionsParams) ([]ListDoctorPatientSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorPatientSessions, arg.PatientUuid, arg.DoctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDoctorPatientSessionsRow
	for rows.Next() {
		var i ListDoctorPatientSessionsRow
		if err := rows.Scan(
			&i.SessionID,
			&i.SessionDate,
			&i.SessionGroupIndex,
			&i.SessionType,
			&i.SessionStatus,
			&i.SessionCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
			&i.PatientUuid,
			&i.PatientName,
			&i.PatientPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorSessions = `-- name: ListDoctorSessions :many

SELECT
    sessions.id as session_id,
    sessions.date as session_date,
    sessions.group_index as session_group_index,
    sessions.type as session_type,
    sessions.status as session_status,
    sessions.created_at as session_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description,
    patients.uuid as patient_uuid,
    patients.name as patient_name,
    patients.phone_number as patient_phone_number
FROM sessions
    JOIN users as doctors ON doctors.uuid = sessions.doctor_uuid
    JOIN users as patients ON patients.uuid = sessions.patient_uuid
WHERE sessions.doctor_uuid = ?
`

type ListDoctorSessionsRow struct {
	SessionID          int64
	SessionDate        time.Time
	SessionGroupIndex  int64
	SessionType        int64
	SessionStatus      int64
	SessionCreatedAt   time.Time
	DoctorUuid         uuid.UUID
	DoctorName         string
	DoctorDescription  string
	PatientUuid        uuid.UUID
	PatientName        string
	PatientPhoneNumber string
}

func (q *Queries) ListDoctorSessions(ctx context.Context, doctorUuid uuid.UUID) ([]ListDoctorSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorSessions, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDoctorSessionsRow
	for rows.Next() {
		var i ListDoctorSessionsRow
		if err := rows.Scan(
			&i.SessionID,
			&i.SessionDate,
			&i.SessionGroupIndex,
			&i.SessionType,
			&i.SessionStatus,
			&i.SessionCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
			&i.PatientUuid,
			&i.PatientName,
			&i.PatientPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorSessionsWithinDate = `-- name: ListDoctorSessionsWithinDate :many

SELECT
    sessions.id as session_id,
    sessions.date as session_date,
    sessions.group_index as session_group_index,
    sessions.type as session_type,
    sessions.status as session_status,
    sessions.created_at as session_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description,
    patients.uuid as patient_uuid,
    patients.name as patient_name,
    patients.phone_number as patient_phone_number
FROM sessions
    JOIN users as doctors ON doctors.uuid = sessions.doctor_uuid
    JOIN users as patients ON patients.uuid = sessions.patient_uuid
WHERE
    sessions.doctor_uuid = ?1
    AND sessions.date >= ?2
    AND sessions.date <= ?3
`

type ListDoctorSessionsWithinDateParams struct {
	DoctorUuid  uuid.UUID
	StartOfDate time.Time
	EndOfDate   time.Time
}

type ListDoctorSessionsWithinDateRow struct {
	SessionID          int64
	SessionDate        time.Time
	SessionGroupIndex  int64
	SessionType        int64
	SessionStatus      int64
	SessionCreatedAt   time.Time
	DoctorUuid         uuid.UUID
	DoctorName         string
	DoctorDescription  string
	PatientUuid        uuid.UUID
	PatientName        string
	PatientPhoneNumber string
}

func (q *Queries) ListDoctorSessionsWithinDate(ctx context.Context, arg ListDoctorSessionsWithinDateParams) ([]ListDoctorSessionsWithinDateRow, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorSessionsWithinDate, arg.DoctorUuid, arg.StartOfDate, arg.EndOfDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDoctorSessionsWithinDateRow
	for rows.Next() {
		var i ListDoctorSessionsWithinDateRow
		if err := rows.Scan(
			&i.SessionID,
			&i.SessionDate,
			&i.SessionGroupIndex,
			&i.SessionType,
			&i.SessionStatus,
			&i.SessionCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
			&i.PatientUuid,
			&i.PatientName,
			&i.PatientPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientSessions = `-- name: ListPatientSessions :many

SELECT
    sessions.id as session_id,
    sessions.date as session_date,
    sessions.group_index as session_group_index,
    sessions.type as session_type,
    sessions.status as session_status,
    sessions.created_at as session_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description,
    patients.uuid as patient_uuid,
    patients.name as patient_name,
    patients.phone_number as patient_phone_number
FROM sessions
    JOIN users as doctors ON doctors.uuid = sessions.doctor_uuid
    JOIN users as patients ON patients.uuid = sessions.patient_uuid
WHERE sessions.patient_uuid = ?
`

type ListPatientSessionsRow struct {
	SessionID          int64
	SessionDate        time.Time
	SessionGroupIndex  int64
	SessionType        int64
	SessionStatus      int64
	SessionCreatedAt   time.Time
	DoctorUuid         uuid.UUID
	DoctorName         string
	DoctorDescription  string
	PatientUuid        uuid.UUID
	PatientName        string
	PatientPhoneNumber string
}

func (q *Queries) ListPatientSessions(ctx context.Context, patientUuid uuid.UUID) ([]ListPatientSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPatientSessions, patientUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPatientSessionsRow
	for rows.Next() {
		var i ListPatientSessionsRow
		if err := rows.Scan(
			&i.SessionID,
			&i.SessionDate,
			&i.SessionGroupIndex,
			&i.SessionType,
			&i.SessionStatus,
			&i.SessionCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
			&i.PatientUuid,
			&i.PatientName,
			&i.PatientPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingDoctorPatientSessions = `-- name: ListUpcomingDoctorPatientSessions :many

SELECT
    sessions.id as session_id,
    sessions.date as session_date,
    sessions.group_index as session_group_index,
    sessions.type as session_type,
    sessions.status as session_status,
    sessions.created_at as session_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description,
    patients.uuid as patient_uuid,
    patients.name as patient_name,
    patients.phone_number as patient_phone_number
FROM sessions
    JOIN users as doctors ON doctors.uuid = sessions.doctor_uuid
    JOIN users as patients ON patients.uuid = sessions.patient_uuid
WHERE
    sessions.patient_uuid = ?
    AND sessions.doctor_uuid = ?
    AND sessions.date >= CURRENT_TIMESTAMP
`

type ListUpcomingDoctorPatientSessionsParams struct {
	PatientUuid uuid.UUID
	DoctorUuid  uuid.UUID
}

type ListUpcomingDoctorPatientSessionsRow struct {
	SessionID          int64
	SessionDate        time.Time
	SessionGroupIndex  int64
	SessionType        int64
	SessionStatus      int64
	SessionCreatedAt   time.Time
	DoctorUuid         uuid.UUID
	DoctorName         string
	DoctorDescription  string
	PatientUuid        uuid.UUID
	PatientName        string
	PatientPhoneNumber string
}

func (q *Queries) ListUpcomingDoctorPatientSessions(ctx context.Context, arg ListUpcomingDoctorPatientSessionsParams) ([]ListUpcomingDoctorPatientSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUpcomingDoctorPatientSessions, arg.PatientUuid, arg.DoctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUpcomingDoctorPatientSessionsRow
	for rows.Next() {
		var i ListUpcomingDoctorPatientSessionsRow
		if err := rows.Scan(
			&i.SessionID,
			&i.SessionDate,
			&i.SessionGroupIndex,
			&i.SessionType,
			&i.SessionStatus,
			&i.SessionCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
			&i.PatientUuid,
			&i.PatientName,
			&i.PatientPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingPatientSessions = `-- name: ListUpcomingPatientSessions :many

SELECT
    sessions.id as session_id,
    sessions.date as session_date,
    sessions.group_index as session_group_index,
    sessions.type as session_type,
    sessions.status as session_status,
    sessions.created_at as session_created_at,
    doctors.uuid as doctor_uuid,
    doctors.name as doctor_name,
    doctors.description as doctor_description,
    patients.uuid as patient_uuid,
    patients.name as patient_name,
    patients.phone_number as patient_phone_number
FROM sessions
    JOIN users as doctors ON doctors.uuid = sessions.doctor_uuid
    JOIN users as patients ON patients.uuid = sessions.patient_uuid
WHERE
    sessions.patient_uuid = ?
    AND sessions.date >= CURRENT_TIMESTAMP
`

type ListUpcomingPatientSessionsRow struct {
	SessionID          int64
	SessionDate        time.Time
	SessionGroupIndex  int64
	SessionType        int64
	SessionStatus      int64
	SessionCreatedAt   time.Time
	DoctorUuid         uuid.UUID
	DoctorName         string
	DoctorDescription  string
	PatientUuid        uuid.UUID
	PatientName        string
	PatientPhoneNumber string
}

func (q *Queries) ListUpcomingPatientSessions(ctx context.Context, patientUuid uuid.UUID) ([]ListUpcomingPatientSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUpcomingPatientSessions, patientUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUpcomingPatientSessionsRow
	for rows.Next() {
		var i ListUpcomingPatientSessionsRow
		if err := rows.Scan(
			&i.SessionID,
			&i.SessionDate,
			&i.SessionGroupIndex,
			&i.SessionType,
			&i.SessionStatus,
			&i.SessionCreatedAt,
			&i.DoctorUuid,
			&i.DoctorName,
			&i.DoctorDescription,
			&i.PatientUuid,
			&i.PatientName,
			&i.PatientPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one

UPDATE sessions
SET
    date = COALESCE(?1, date),
    status = COALESCE(?2, status),
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?3 RETURNING id
`

type UpdateSessionParams struct {
	Date   sql.NullTime
	Status sql.NullInt64
	ID     int64
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateSession, arg.Date, arg.Status, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
