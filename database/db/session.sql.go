// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/gofrs/uuid"
)

const createSession = `-- name: CreateSession :one

INSERT INTO
    sessions (
        patient_uuid,
        doctor_uuid,
        date,
        group_index,
        type,
        status
    )
VALUES (?, ?, ?, ?, ?, ?) RETURNING id, patient_uuid, doctor_uuid, date, group_index, type, status, created_at, updated_at
`

type CreateSessionParams struct {
	PatientUuid uuid.UUID
	DoctorUuid  uuid.UUID
	Date        time.Time
	GroupIndex  int64
	Type        int64
	Status      int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.PatientUuid,
		arg.DoctorUuid,
		arg.Date,
		arg.GroupIndex,
		arg.Type,
		arg.Status,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.Date,
		&i.GroupIndex,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one

SELECT id, patient_uuid, doctor_uuid, date, group_index, type, status, created_at, updated_at FROM sessions WHERE id = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.Date,
		&i.GroupIndex,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDoctorSessions = `-- name: ListDoctorSessions :many

SELECT sessions.id, sessions.patient_uuid, sessions.doctor_uuid, sessions.date, sessions.group_index, sessions.type, sessions.status, sessions.created_at, sessions.updated_at FROM sessions WHERE doctor_uuid = ?
`

func (q *Queries) ListDoctorSessions(ctx context.Context, doctorUuid uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorSessions, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.PatientUuid,
			&i.DoctorUuid,
			&i.Date,
			&i.GroupIndex,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientSessions = `-- name: ListPatientSessions :many

SELECT sessions.id, sessions.patient_uuid, sessions.doctor_uuid, sessions.date, sessions.group_index, sessions.type, sessions.status, sessions.created_at, sessions.updated_at FROM sessions WHERE patient_uuid = ?
`

func (q *Queries) ListPatientSessions(ctx context.Context, patientUuid uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listPatientSessions, patientUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.PatientUuid,
			&i.DoctorUuid,
			&i.Date,
			&i.GroupIndex,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one

UPDATE sessions
SET
    date = COALESCE(?1, date),
    status = COALESCE(?2, status),
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?3 RETURNING id, patient_uuid, doctor_uuid, date, group_index, type, status, created_at, updated_at
`

type UpdateSessionParams struct {
	Date   sql.NullTime
	Status sql.NullInt64
	ID     int64
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession, arg.Date, arg.Status, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.PatientUuid,
		&i.DoctorUuid,
		&i.Date,
		&i.GroupIndex,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
