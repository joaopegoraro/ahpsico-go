// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/gofrs/uuid"
)

const createUser = `-- name: CreateUser :one

INSERT INTO
    users (
        uuid,
        name,
        phone_number,
        description,
        crp,
        pix_key,
        payment_details,
        role
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?) RETURNING uuid, name, phone_number, description, crp, pix_key, payment_details, role, created_at, updated_at
`

type CreateUserParams struct {
	Uuid           uuid.UUID
	Name           string
	PhoneNumber    string
	Description    string
	Crp            string
	PixKey         string
	PaymentDetails string
	Role           int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uuid,
		arg.Name,
		arg.PhoneNumber,
		arg.Description,
		arg.Crp,
		arg.PixKey,
		arg.PaymentDetails,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Description,
		&i.Crp,
		&i.PixKey,
		&i.PaymentDetails,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT uuid, name, phone_number, description, crp, pix_key, payment_details, role, created_at, updated_at FROM users WHERE uuid = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, argUuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Description,
		&i.Crp,
		&i.PixKey,
		&i.PaymentDetails,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one

SELECT uuid, name, phone_number, description, crp, pix_key, payment_details, role, created_at, updated_at FROM users WHERE phone_number = ? LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Description,
		&i.Crp,
		&i.PixKey,
		&i.PaymentDetails,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByRole = `-- name: GetUserByRole :one

SELECT uuid, name, phone_number, description, crp, pix_key, payment_details, role, created_at, updated_at FROM users WHERE uuid = ? AND role = ? LIMIT 1
`

type GetUserByRoleParams struct {
	Uuid uuid.UUID
	Role int64
}

func (q *Queries) GetUserByRole(ctx context.Context, arg GetUserByRoleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByRole, arg.Uuid, arg.Role)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Description,
		&i.Crp,
		&i.PixKey,
		&i.PaymentDetails,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one

UPDATE users
SET
    name = COALESCE(?1, name),
    description = COALESCE(
        ?2,
        description
    ),
    crp = COALESCE(?3, crp),
    pix_key = COALESCE(?4, pix_key),
    payment_details = COALESCE(
        ?5,
        payment_details
    ),
    updated_at = CURRENT_TIMESTAMP
WHERE
    uuid = ?6 RETURNING uuid, name, phone_number, description, crp, pix_key, payment_details, role, created_at, updated_at
`

type UpdateUserParams struct {
	Name           sql.NullString
	Description    sql.NullString
	Crp            sql.NullString
	PixKey         sql.NullString
	PaymentDetails sql.NullString
	Uuid           uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Description,
		arg.Crp,
		arg.PixKey,
		arg.PaymentDetails,
		arg.Uuid,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Description,
		&i.Crp,
		&i.PixKey,
		&i.PaymentDetails,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
