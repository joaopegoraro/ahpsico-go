// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: advice.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const createAdvice = `-- name: CreateAdvice :exec

INSERT INTO advices (message, doctor_uuid) VALUES (?, ?)
`

type CreateAdviceParams struct {
	Message    string
	DoctorUuid uuid.UUID
}

func (q *Queries) CreateAdvice(ctx context.Context, arg CreateAdviceParams) error {
	_, err := q.db.ExecContext(ctx, createAdvice, arg.Message, arg.DoctorUuid)
	return err
}

const deleteAdvice = `-- name: DeleteAdvice :exec

DELETE FROM advices WHERE id = ?
`

func (q *Queries) DeleteAdvice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAdvice, id)
	return err
}

const listDoctorAdvices = `-- name: ListDoctorAdvices :many

SELECT id, message, doctor_uuid, created_at FROM advices WHERE doctor_uuid = ?
`

func (q *Queries) ListDoctorAdvices(ctx context.Context, doctorUuid uuid.UUID) ([]Advice, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorAdvices, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Advice
	for rows.Next() {
		var i Advice
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.DoctorUuid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientAdvicesFromDoctor = `-- name: ListPatientAdvicesFromDoctor :many

SELECT advices.id, advices.message, advices.doctor_uuid, advices.created_at
FROM advices
    JOIN advice_with_patient ON advice.id = advice_with_patient.advice_id
WHERE
    advice_with_patient.patient_uuid = ?
    AND advices.doctor_uuid = ?
`

type ListPatientAdvicesFromDoctorParams struct {
	PatientUuid uuid.UUID
	DoctorUuid  uuid.UUID
}

func (q *Queries) ListPatientAdvicesFromDoctor(ctx context.Context, arg ListPatientAdvicesFromDoctorParams) ([]Advice, error) {
	rows, err := q.db.QueryContext(ctx, listPatientAdvicesFromDoctor, arg.PatientUuid, arg.DoctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Advice
	for rows.Next() {
		var i Advice
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.DoctorUuid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
