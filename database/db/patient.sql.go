// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: patient.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const createPatient = `-- name: CreatePatient :one

INSERT INTO
    patients (uuid, name, phone_number)
VALUES (?, ?, ?) RETURNING uuid, name, phone_number, created_at, updated_at
`

type CreatePatientParams struct {
	Uuid        uuid.UUID
	Name        string
	PhoneNumber string
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient, arg.Uuid, arg.Name, arg.PhoneNumber)
	var i Patient
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePatient = `-- name: DeletePatient :exec

DELETE FROM patients WHERE uuid = ?
`

func (q *Queries) DeletePatient(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePatient, argUuid)
	return err
}

const getDoctorPatientWithUuid = `-- name: GetDoctorPatientWithUuid :one

SELECT patients.uuid, patients.name, patients.phone_number, patients.created_at, patients.updated_at
FROM patients
    JOIN patient_with_doctor ON patients.uuid = patient_with_doctor.patient_uuid
WHERE
    patients.uuid = ?
    AND patient_with_doctor.doctor_uuid = ?
LIMIT 1
`

type GetDoctorPatientWithUuidParams struct {
	Uuid       uuid.UUID
	DoctorUuid uuid.UUID
}

func (q *Queries) GetDoctorPatientWithUuid(ctx context.Context, arg GetDoctorPatientWithUuidParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getDoctorPatientWithUuid, arg.Uuid, arg.DoctorUuid)
	var i Patient
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPatient = `-- name: GetPatient :one

SELECT uuid, name, phone_number, created_at, updated_at FROM patients WHERE uuid = ? LIMIT 1
`

func (q *Queries) GetPatient(ctx context.Context, argUuid uuid.UUID) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, argUuid)
	var i Patient
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPatientByPhoneNumber = `-- name: GetPatientByPhoneNumber :one

SELECT uuid, name, phone_number, created_at, updated_at FROM patients WHERE phone_number = ? LIMIT 1
`

func (q *Queries) GetPatientByPhoneNumber(ctx context.Context, phoneNumber string) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatientByPhoneNumber, phoneNumber)
	var i Patient
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDoctorPatients = `-- name: ListDoctorPatients :many

SELECT patients.uuid, patients.name, patients.phone_number, patients.created_at, patients.updated_at
FROM patients
    JOIN patient_with_doctor ON patients.uuid = patient_with_doctor.patient_uuid
WHERE
    patient_with_doctor.doctor_uuid = ?
`

func (q *Queries) ListDoctorPatients(ctx context.Context, doctorUuid uuid.UUID) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorPatients, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorPatientsByPhoneNumber = `-- name: ListDoctorPatientsByPhoneNumber :many

SELECT patients.uuid, patients.name, patients.phone_number, patients.created_at, patients.updated_at
FROM patients
    JOIN patient_with_doctor ON patients.uuid = patient_with_doctor.patient_uuid
WHERE
    patient_with_doctor.doctor_uuid = ?
    AND patients.phone_number = ?
`

type ListDoctorPatientsByPhoneNumberParams struct {
	DoctorUuid  uuid.UUID
	PhoneNumber string
}

func (q *Queries) ListDoctorPatientsByPhoneNumber(ctx context.Context, arg ListDoctorPatientsByPhoneNumberParams) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorPatientsByPhoneNumber, arg.DoctorUuid, arg.PhoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePatient = `-- name: UpdatePatient :one

UPDATE patients
SET
    name = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE
    uuid = ?2 RETURNING uuid, name, phone_number, created_at, updated_at
`

type UpdatePatientParams struct {
	Name string
	Uuid uuid.UUID
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, updatePatient, arg.Name, arg.Uuid)
	var i Patient
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
