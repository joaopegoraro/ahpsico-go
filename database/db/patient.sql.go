// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: patient.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const getDoctorPatientWithUuid = `-- name: GetDoctorPatientWithUuid :one

SELECT users.uuid, users.name, users.phone_number, users.description, users.crp, users.pix_key, users.payment_details, users.role, users.created_at, users.updated_at
FROM users
    JOIN patient_with_doctor ON users.uuid = patient_with_doctor.patient_uuid
WHERE
    users.uuid = ?
    AND patient_with_doctor.doctor_uuid = ?
LIMIT 1
`

type GetDoctorPatientWithUuidParams struct {
	Uuid       uuid.UUID
	DoctorUuid uuid.UUID
}

func (q *Queries) GetDoctorPatientWithUuid(ctx context.Context, arg GetDoctorPatientWithUuidParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getDoctorPatientWithUuid, arg.Uuid, arg.DoctorUuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Description,
		&i.Crp,
		&i.PixKey,
		&i.PaymentDetails,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDoctorPatients = `-- name: ListDoctorPatients :many

SELECT users.uuid, users.name, users.phone_number, users.description, users.crp, users.pix_key, users.payment_details, users.role, users.created_at, users.updated_at
FROM users
    JOIN patient_with_doctor ON users.uuid = patient_with_doctor.patient_uuid
WHERE
    patient_with_doctor.doctor_uuid = ?
`

func (q *Queries) ListDoctorPatients(ctx context.Context, doctorUuid uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorPatients, doctorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.PhoneNumber,
			&i.Description,
			&i.Crp,
			&i.PixKey,
			&i.PaymentDetails,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorPatientsByPhoneNumber = `-- name: ListDoctorPatientsByPhoneNumber :many

SELECT users.uuid, users.name, users.phone_number, users.description, users.crp, users.pix_key, users.payment_details, users.role, users.created_at, users.updated_at
FROM users
    JOIN patient_with_doctor ON users.uuid = patient_with_doctor.patient_uuid
WHERE
    patient_with_doctor.doctor_uuid = ?
    AND users.phone_number = ?
`

type ListDoctorPatientsByPhoneNumberParams struct {
	DoctorUuid  uuid.UUID
	PhoneNumber string
}

func (q *Queries) ListDoctorPatientsByPhoneNumber(ctx context.Context, arg ListDoctorPatientsByPhoneNumberParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listDoctorPatientsByPhoneNumber, arg.DoctorUuid, arg.PhoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.PhoneNumber,
			&i.Description,
			&i.Crp,
			&i.PixKey,
			&i.PaymentDetails,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
